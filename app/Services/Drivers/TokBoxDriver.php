<?php


namespace App\Services\Drivers;


use App\Services\Contracts\TokBoxContract;
use OpenTok\OpenTok;
use OpenTok\Session;
use OpenTok\Stream;
use OpenTok\StreamList;
use OpenTok\Archive;
use OpenTok\Broadcast;
use OpenTok\Layout;
use OpenTok\Role;
use OpenTok\MediaMode;
use OpenTok\ArchiveMode;
use OpenTok\OutputMode;
use OpenTok\Util\Client;
use OpenTok\Util\Validators;
use OpenTok\Exception\UnexpectedValueException;
use OpenTok\Exception\InvalidArgumentException;

class TokBoxDriver extends OpenTok implements TokBoxContract
{
    protected $sessionOptions = ['archiveMode' => ArchiveMode::ALWAYS,
        'mediaMode' => MediaMode::ROUTED,
        //     'location' => '12.34.56.78',
    ];


    public function __construct($options = array())
    {

        $apiKey = config('services.tokbox.key');
        $apiSecret = config('services.tokbox.secret');

        parent::__construct($apiKey, $apiSecret, $options);

    }

    public function getSession($sessionId, $options = array()): Session
    {

        return new Session($this, (string)$sessionId, $options);
    }

    public function defaultSession(?array $options = []): Session
    {

        if (empty($options)) {
            $options = $this->sessionOptions;

        }

        return $session = $this->createSession($options);
    }

    public function generateToken($sessionId, $options = array())
    {
        if (empty($options)) {
            $options = [
                'role' => Role::MODERATOR,
                'expireTime' => time() + (7 * 24 * 60 * 60), // in one week
                'data' => '',
                'initialLayoutClassList' => array('focus')
            ];
        }
        return parent::generateToken($sessionId, $options); // TODO: Change the autogenerated stub
    }
}
